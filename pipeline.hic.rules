import os
import io
import sys
import traceback
import json



try:
    samples = config['samples']

    data_dir = config['data_dir']
    work_dir = config['work_dir']
    pipeline_home = config['pipeline_home']

    configfile: pipeline_home +"/config/config.hic.yaml"

    pipeline_version = config["common"]["pipeline_version"]
    emails = config["common"]["emails"]

    config["pipeline_home"] = pipeline_home
    config["work_dir"] = work_dir
        
    suffix_R1 = config["common"]["FASTQ_suffix_R1"]
    suffix_R2 = config["common"]["FASTQ_suffix_R2"]

    SAMPLES = []
    #prepare targets    
    HICPRO_SCRIPTS = []    
    MERGED_PAIRS = []    
    MERGE_STATS_SUMMARY = []
    JUICEBOX_OUT = []
    VIEWPOINT_OUT = []
    PAIRS = {}
    MERGE_STATS = {}
    FASTQS = {}

    for sample_id, sample in samples.items():
        sample["Genome"] = config["genome"]
        FASTQS[sample_id] = []
        MERGE_STATS[sample_id] = []
        PAIRS[sample_id] = []
        
        SAMPLES.append(sample_id)
        #add FASTQ targets
        if not "SampleFiles" in sample:
            raise Exception('SampleFiles not found in sample sheet')
        sample_file = sample["SampleFiles"]
        FASTQS[sample_id].append(sample_id + "/DATA/" + sample_id + '/' + sample_id + suffix_R1)
        FASTQS[sample_id].append(sample_id + "/DATA/" + sample_id + '/' + sample_id + suffix_R2)
        if not os.path.exists(data_dir + "/" + sample_file + "/" + sample_file + suffix_R1):
            raise Exception(data_dir + "/" + sample_file + "/" + sample_file + suffix_R1 + ' not found')
        if not os.path.exists(data_dir + "/" + sample_file + "/" + sample_file + suffix_R2):
            raise Exception(data_dir + "/" + sample_file + "/" + sample_file + suffix_R2 + ' not found')
        #add HiC-Pro targets
        if not "Genome" in sample:
            raise Exception('Genome not found in sample sheet')
        ref_genome = sample["Genome"]
        if "SpikeIn" in sample and sample["SpikeIn"] == "yes":
            #only add script targets once
            if len(HICPRO_SCRIPTS) == 0:
                if not "SpikeInGenome" in sample:
                    raise Exception('SpikeInGenome not found in sample sheet')
                spike_in_genome = sample["SpikeInGenome"]
                HICPRO_SCRIPTS.append(sample_id + "/HiCproOUTPUT." + spike_in_genome + "/HiCPro_step1_" + spike_in_genome + "_HiCpro.sh")
                HICPRO_SCRIPTS.append(sample_id + "/HiCproOUTPUT." + spike_in_genome + "/HiCPro_step2_" + spike_in_genome + "_HiCpro.sh")
            PAIRS[sample_id].append(sample_id + "//HiCproOUTPUT." + spike_in_genome + "/hic_results/data/" + sample_id + "/" + sample_id + "_" + config[spike_in_genome]["bowtie2_index"] + ".bwt2pairs.validPairs")
            MERGED_PAIRS.append(sample_id + "/HiCproOUTPUT." + spike_in_genome + "/hic_results/data/" + sample_id + "/" + sample_id + ".allValidPairs")
            MERGE_STATS[sample_id].append(sample_id + "/HiCproOUTPUT." + spike_in_genome + "/hic_results/stats/" + sample_id + "/" + sample_id + "_allValidPairs.mergestat")
        HICPRO_SCRIPTS.append(sample_id + "/HiCproOUTPUT." + ref_genome + "/HiCPro_step1_" + ref_genome + "_HiCpro.sh")
        HICPRO_SCRIPTS.append(sample_id + "/HiCproOUTPUT." + ref_genome + "/HiCPro_step2_" + ref_genome + "_HiCpro.sh")
        PAIRS[sample_id].append(sample_id + "/HiCproOUTPUT." + ref_genome + "/hic_results/data/" + sample_id + "/" + sample_id + "_" + config[ref_genome]["bowtie2_index"] + ".bwt2pairs.validPairs")
        MERGED_PAIRS.append(sample_id + "/HiCproOUTPUT." + ref_genome + "/hic_results/data/" + sample_id + "/" + sample_id + ".allValidPairs")    
        MERGE_STATS[sample_id].append(sample_id + "/HiCproOUTPUT." + ref_genome + "/hic_results/stats/" + sample_id + "/" + sample_id + "_allValidPairs.mergestat")    
        JUICEBOX_OUT.append(sample_id + "/" + sample_id + ".allValidPairs.hic")
        MERGE_STATS_SUMMARY.append(sample_id + "/mergeStats.txt")
        #VIEWPOINT_OUT.append(sample_id + "/HiCproOUTPUT." + ref_genome + "/hic_results/data/" + sample_id + "/" + sample_id + ".bedgraph")

except Exception as err:
    exc_type, exc_value, exc_traceback = sys.exc_info()
    output = io.StringIO()
    traceback.print_exception(exc_type, exc_value, exc_traceback, file=output)
    contents = output.getvalue()
    output.close()
    print(contents)    
    shell("echo 'HiC pipeline has exception: reason " + contents + ". Working Dir:  {work_dir}' |mutt -e 'my_hdr From:chouh@nih.gov' -s 'Khanlab HiC Pipeline Status' `whoami`@mail.nih.gov {emails} ")
    sys.exit()    
    
onerror:
    shell("echo 'HiC pipeline version {pipeline_version} failed on Biowulf. Samples: {SAMPLES}. Working Dir:  {work_dir}' |mutt -e 'my_hdr From:chouh@nih.gov' -s 'Khanlab HiC Pipeline Status' `whoami`@mail.nih.gov {emails} ")
onstart:
    shell("echo 'HiC pipeline version {pipeline_version} started on Biowulf. Samples: {SAMPLES}. Working Dir:  {work_dir}' |mutt -e 'my_hdr From:chouh@nih.gov' -s 'Khanlab HiC Pipeline Status' `whoami`@mail.nih.gov {emails} ")
onsuccess:
    shell("echo 'HiC pipeline version {pipeline_version} finished on Biowulf. Samples: {SAMPLES}. Working Dir:  {work_dir}' |mutt -e 'my_hdr From:chouh@nih.gov' -s 'Khanlab HiC Pipeline Status' `whoami`@mail.nih.gov {emails} ")
    shell("for s in {SAMPLES};do touch {work_dir}/${{s}}/successful.txt;chgrp -R khanlab {work_dir}/${{s}};done")
    print("Workflow finished, no error")
    
localrules: HiCPro, prepareFASTQ, HiC_pipeline, mergeStats
#print(HICPRO_SCRIPTS,MERGED_PAIRS,JUICEBOX_OUT,MERGE_STATS_SUMMARY)
rule HiC_pipeline:
    input: MERGED_PAIRS,JUICEBOX_OUT,MERGE_STATS_SUMMARY

rule makeViewPoint:
    input:  
            "{sample}/HiCproOUTPUT.{genome}/hic_results/data/{sample}/{sample}.allValidPairs"
    output: 
            "{sample}/HiCproOUTPUT.{genome}/hic_results/data/{sample}/{sample}.bedgraph"
    params:
            fragment_bed=lambda wildcards: config[wildcards.genome]["fragment_bed"],
            capture_bed=lambda wildcards: config[wildcards.genome]["capture_bed"],
            rulename = "makeViewPoint",
            log_dir = lambda wildcards: wildcards.sample + '/log',
            batch    = config["cluster"]["medium"]
    shell:
            """
            module load hicpro/{version}
            make_viewpoints.py -i {input} -f {params.fragment_bed} -t {params.capture_bed} -e 1000 -v -o {output}
            """

rule HiCpro2Juicebox:
    input: 
            lambda wildcards: wildcards.sample + "/HiCproOUTPUT." + samples[wildcards.sample]["Genome"] + "/hic_results/data/" + wildcards.sample + "/" + wildcards.sample + ".allValidPairs"
    output: 
            "{sample}/{sample}.allValidPairs.hic"
    version:
            config["version"]["hicpro"]
    params:
            juicer_jar=config["common"]["juicer_jar"],
            juicer_genome=lambda wildcards: config[samples[wildcards.sample]["Genome"]]["juicer_genome"],
            rulename = "HiCpro2Juicebox",
            log_dir = lambda wildcards: wildcards.sample + '/log',
            batch    = config["cluster"]["medium"]
    benchmark:
            "{sample}/benchmark/HiCpro2Juicebox.benchmark.txt"
    shell:
            """            
            module load hicpro/{version}
            hicpro2juicebox.sh -i {input} -g {params.juicer_genome} -j {params.juicer_jar} -o {wildcards.sample}
            """

rule mergeStats:
    input:
            lambda wildcards: MERGE_STATS[wildcards.sample]
    output:
            "{sample}/mergeStats.txt"
    params:
            pipeline_home = config["pipeline_home"],
            ref_genome = lambda wildcards: samples[wildcards.sample]["Genome"],
            spike_in_genome = lambda wildcards: samples[wildcards.sample]["SpikeInGenome"] if "SpikeInGenome" in samples[wildcards.sample] else "",
    shell:
            """
            bash {params.pipeline_home}/scripts/mergeStats.sh {wildcards.sample} {params.ref_genome} {params.spike_in_genome}
            """
            
rule HiCProStep2:
    input:
            lambda wildcards: wildcards.sample+"/HiCproOUTPUT." + wildcards.genome + "/hic_results/data/" + wildcards.sample + "/" + wildcards.sample + "_" + config[wildcards.genome]["bowtie2_index"] + ".bwt2pairs.validPairs"
    output: 
            "{sample}/HiCproOUTPUT.{genome}/hic_results/data/{sample}/{sample}.allValidPairs",
            "{sample}/HiCproOUTPUT.{genome}/hic_results/stats/{sample}/{sample}_allValidPairs.mergestat"
    version:
            config["version"]["hicpro"]
    params:
            work_dir = config["work_dir"],
            rulename = "HiCProStep2",
            log_dir = lambda wildcards: wildcards.sample + '/log',
            batch    = config["cluster"]["medium"]
    benchmark:
            "{sample}/benchmark/HiCProStep2.{genome}.benchmark.txt"
    shell:
            """            
            module load hicpro/{version}
            sed -i 's/$SLURM_SUBMIT_DIR/{wildcards.sample}\/HiCproOUTPUT\.{wildcards.genome}/' {wildcards.sample}/HiCproOUTPUT.{wildcards.genome}/HiCPro_step2_{wildcards.genome}_HiCpro.sh
            bash {wildcards.sample}/HiCproOUTPUT.{wildcards.genome}/HiCPro_step2_{wildcards.genome}_HiCpro.sh
            rm -rf {wildcards.sample}/HiCproOUTPUT.{wildcards.genome}/bowtie_results
            cd ..
            """

rule HiCProStep1:
    input: 
            "{sample}/HiCproOUTPUT.{genome}/HiCPro_step1_{genome}_HiCpro.sh"
    output: 
            "{sample}/HiCproOUTPUT.{genome}/hic_results/data/{sample}/{sample}_{bowtie_idx}.bwt2pairs.validPairs"
    version:
            config["version"]["hicpro"]
    params:
            work_dir = config["work_dir"],
            rulename = "HiCProStep1",
            log_dir = "{sample}/log",
            batch    = config["cluster"]["large"]
    benchmark:
            "{sample}/benchmark/HiCProStep1.{genome}.{bowtie_idx}.benchmark.txt"
    shell:
            """
            module load hicpro/{version}
            cd {wildcards.sample}/HiCproOUTPUT.{wildcards.genome}
            sed -i 's/$SLURM_SUBMIT_DIR\///' HiCPro_step1_{wildcards.genome}_HiCpro.sh
            bash HiCPro_step1_{wildcards.genome}_HiCpro.sh
            """

rule HiCPro:
    input:
            lambda wildcards: FASTQS[wildcards.sample]
    output: 
            "{sample}/HiCproOUTPUT.{genome}/HiCPro_step1_{genome}_HiCpro.sh",
            "{sample}/HiCproOUTPUT.{genome}/HiCPro_step2_{genome}_HiCpro.sh"
    version:
            config["version"]["hicpro"]
    params:
            out_dir = lambda wildcards: wildcards.sample + '/HiCproOUTPUT.' + wildcards.genome,
            config_file = lambda wildcards: config["pipeline_home"] + '/' + config[wildcards.genome]["hicpro_dpnii_config"] if samples[wildcards.sample]["Digest"] == "dpnii" else config["pipeline_home"] + '/' + config[wildcards.genome]["hicpro_config"]
    shell:
            """
            module load hicpro/{version}
            rm -rf {params.out_dir}
            HiC-Pro -i {wildcards.sample}/DATA/ -o {params.out_dir}/ -c {params.config_file} -p
            """

rule prepareFASTQ:
    input: 
            lambda wildcards: data_dir + "/" + samples[wildcards.sample]["SampleFiles"] + "/" + samples[wildcards.sample]["SampleFiles"] + "_" + wildcards.suffix
    output: 
            "{sample}/DATA/{sample}/{sample}_{suffix}"
    shell:
            """
            mkdir -p {wildcards.sample}
            mkdir -p {wildcards.sample}/log
            mkdir -p {wildcards.sample}/DATA
            mkdir -p {wildcards.sample}/DATA/{wildcards.sample}
            ln -s {input} {output}
            """